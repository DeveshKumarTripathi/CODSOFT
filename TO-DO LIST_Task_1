import tkinter as tk
from tkinter import messagebox, simpledialog
from datetime import datetime, timedelta
import os

TASKS_FILE = "tasks.txt"
DATE_FORMAT = "%Y-%m-%d %H:%M"

def load_tasks():
    if not os.path.exists(TASKS_FILE):
        return []
    with open(TASKS_FILE, "r") as file:
        lines = file.readlines()
        tasks = []
        for line in lines:
            try:
                text, due, done = line.strip().split("||")
                tasks.append({"task": text, "due": due, "done": done == "1"})
            except:
                continue
        return tasks
def save_tasks():
    with open(TASKS_FILE, "w") as file:
        for task in tasks:
            line = f'{task["task"]}||{task["due"]}||{"1" if task["done"] else "0"}\n'
            file.write(line)
def add_task():
    task = task_entry.get()
    if task:
        due_input = simpledialog.askstring("Due Date", "Enter due date (YYYY-MM-DD HH:MM):")
        try:
            due_date = datetime.strptime(due_input, DATE_FORMAT)
            tasks.append({"task": task, "due": due_input, "done": False})
            update_task_list()
            save_tasks()
            task_entry.delete(0, tk.END)
        except:
            messagebox.showerror("Invalid", "Please enter due date in YYYY-MM-DD HH:MM format")
def delete_task():
    try:
        selected = task_listbox.curselection()[0]
        tasks.pop(selected)
        update_task_list()
        save_tasks()
    except IndexError:
        messagebox.showwarning("Warning", "No task selected")
def mark_done():
    try:
        selected = task_listbox.curselection()[0]
        tasks[selected]["done"] = not tasks[selected]["done"]
        update_task_list()
        save_tasks()
    except IndexError:
        messagebox.showwarning("Warning", "No task selected")
def sort_tasks():
    tasks.sort(key=lambda x: datetime.strptime(x["due"], DATE_FORMAT))
    update_task_list()
def show_upcoming():
    now = datetime.now()
    upcoming = [t for t in tasks if datetime.strptime(t["due"], DATE_FORMAT) < now + timedelta(hours=24)]
    if not upcoming:
        messagebox.showinfo("Upcoming", "No tasks due in next 24 hours")
        return
    msg = "\n".join([f'{t["task"]} (Due: {t["due"]})' for t in upcoming])
    messagebox.showinfo("Upcoming Tasks", msg)
def update_task_list():
    task_listbox.delete(0, tk.END)
    for t in tasks:
        label = f'{"[âœ”] " if t["done"] else ""}{t["task"]} - Due: {t["due"]}'
        task_listbox.insert(tk.END, label)
# --- GUI Setup ---
root = tk.Tk()
root.title("ðŸ—‚ To-Do List with Due Dates")
root.geometry("500x600")
root.configure(bg="#1e1e1e")

tasks = load_tasks()

# Task Entry
task_entry = tk.Entry(root, font=("Helvetica", 14), bg="#2b2b2b", fg="#f0f0f0", insertbackground="white")
task_entry.pack(pady=20, padx=20, fill=tk.X)
# Button Frame
button_frame = tk.Frame(root, bg="#1e1e1e")
button_frame.pack(pady=10)

add_button = tk.Button(button_frame, text="Add Task", command=add_task, bg="#007acc", fg="white", width=12)
add_button.grid(row=0, column=0, padx=5)
done_button = tk.Button(button_frame, text="Mark Done", command=mark_done, bg="#28a745", fg="white", width=12)
done_button.grid(row=0, column=1, padx=5)

delete_button = tk.Button(button_frame, text="Delete", command=delete_task, bg="#dc3545", fg="white", width=12)
delete_button.grid(row=0, column=2, padx=5)
# Sort and Reminder Buttons
sort_button = tk.Button(root, text="Sort by Due Date", command=sort_tasks, bg="#6f42c1", fg="white")
sort_button.pack(pady=5)

